#!/usr/bin/env perl

# mmtop10.pl
# v1.0 - 12/9/2011
# Copyright (c) 2011 Carl Gorringe <car1@gorringe.org>
# Licensed under the MIT license
# https://github.com/cgorringe/mmStats
#
# About:
#   This downloads from a Mailman mailing list archive at the given URL,
#   then outputs the Top-10 users by number of posts in each month, and
#   the overall total.
#
# Usage:  
#   mmtop10.pl URL > output.html
#
#------------------------------------------------------------------------------
# Installing Instructions
#
# You may need to run the following first:
#   sudo perl -MCPAN -e 'install IO::Socket::SSL'
#
# * To check to see if a Perl Module is installed, type:
#   perl -Mfoo::bar -e 1
#   where "foo::bar" is the name of the module to check.
# * To install a Perl Module from the CPAN repository:
#   sudo perl -MCPAN -e 'install foo::bar'
#   where "foo::bar" is the name of the module to install.
#
# Modules that you may need to install:
#   IO::Socket::SSL
#------------------------------------------------------------------------------

use strict;
use LWP::Simple qw(get getprint);
use LWP::UserAgent;
use IO::Socket::SSL;

my $debug_flag = 1;

#------------------------------------------------------------------------------
# Download and Parse the Mailman archive index file and return a list 
# of URL strings of each month's author.html URL.
#   Input: $url of index directory (must end in a slash!)
# Returns: (\@urlList, \@monthList)

sub parseIndexPage($)
{
  my $url = $_[0];
  my @urlList = ();
  my @monthList = ();

  # download index page
  my $ua = LWP::UserAgent->new(ssl_opts => { verify_hostname => 1 });
  my $response = $ua->get($url);

  if ($response->is_success) {
    my $text = $response->decoded_content;
    #print $text;  # test

    ## Example pattern to search for:
    ## href="2011-December/author.html"

    @monthList = $text =~ /href="(.*)\/author.html"/g;
    my $u;
    foreach my $m (@monthList) {
      $u = $url . $m . '/author.html';
      push @urlList, $u;
    }
  }
  else {
    print STDERR "ERROR getting $url\n" if ($debug_flag);
    print STDERR "      status code: ". $response->status_line ."\n";
  }

  return (\@urlList, \@monthList);
}

#------------------------------------------------------------------------------
# Download and Parse a month's author archive page.
#   Input: $url of the html page to download.
# Returns: (\@userNames, \@numPosts) sorted by numPosts in descending order.

sub parseMonthPage($)
{
  my $url = $_[0];
  my @userNames = ();
  my @numPosts = ();
  my %users;

  # download page
  my $ua = LWP::UserAgent->new(ssl_opts => { verify_hostname => 1 });
  my $response = $ua->get($url);

  if ($response->is_success) {
    my $text = $response->decoded_content;

    # tally user names
    my @tempUsers = $text =~ /\<I\>(.*)/g;
    foreach my $u (@tempUsers) {
      if ($users{$u}) {
        $users{$u} += 1;
      }
      else {
        $users{$u} = 1;
      }
    }

    # convert hash array into an array of tuples
    my @users2 = ();
    foreach my $u (keys %users) {
      #print "$users{$u} \t $u\n";  # test
      push @users2, [$users{$u}, $u];
    }

    # sort users by most posts
    my @users3 = sort { $b->[0] <=> $a->[0] } @users2;

    # split into 2 arrays for returning
    foreach my $u (@users3) {
      #print "$u->[0] \t $u->[1]\n";  # test
      push @numPosts, $u->[0];
      push @userNames, $u->[1];
    }
  }
  else {
    print STDERR "ERROR getting $url\n" if ($debug_flag);
    print STDERR "      status code: ". $response->status_line ."\n";
  }

  return (\@userNames, \@numPosts);
}

#------------------------------------------------------------------------------
# Return HTML header and footer.

sub htmlHeader($$)
{
  my $url = $_[0];
  my $listTitle = $_[1];

  return <<HTMLCODE;
<!DOCTYPE html>
<html>
<head>
 <title>Top10 - $listTitle</title>
 <link rel="stylesheet" href="mmstyle.css" type="text/css" />
</head>
<body>
<h1>Top 10 Posters</h1>
<h2><a href="$url">$listTitle</a></h2>
<br/><br/>
HTMLCODE
}

sub htmlFooter()
{
  return <<HTMLCODE;
<div class="clear"></div>
<br/><br/>
<div class="copyright">Page Generated by <a href="https://github.com/cgorringe/mmStats">mmStats</a>.</div><br/>
</body>
</html>
HTMLCODE
}

#------------------------------------------------------------------------------
# Return HTML code for a single month's top 10 list as a table.

sub htmlMonthTable($$$$)
{
  my $url           = $_[0];
  my $monthTitle    = $_[1];
  my $userNames_ref = $_[2];
  my $numPosts_ref  = $_[3];
  my $maxposts = $$numPosts_ref[0];
  my $width;

  my $ret = <<HTMLCODE;
<div class="col">
<table class="statTable">
 <caption><a href="$url">$monthTitle</a></caption>
HTMLCODE

  for (my $i=0; $i < scalar @$userNames_ref; $i++) {
    if ($i == 10) { last; }  # only print top 10

    $width = ($maxposts == 0) ? 100 : int($$numPosts_ref[$i] / $maxposts * 100);

    $ret .= '<tr><td>'. ($i+1) .'</td><td>'. $$userNames_ref[$i]
           .'</td><td><div style="width:'. $width .'%">'. $$numPosts_ref[$i] 
           ."</div></td></tr>\n";
  }

  $ret .= "</table>\n</div>\n";
  return $ret;
}

#------------------------------------------------------------------------------
# Extracts the Mailman list title from the given URL.

sub extractListTitle($)
{
  my $url = $_[0];
  $url =~ m{([^\/]*)\/$};
  return $1;
}

#------------------------------------------------------------------------------
# Main Program
{
  my $url = "https://www.noisebridge.net/pipermail/noisebridge-discuss/";

  print STDERR "Mailman Top Ten Posters Generator v1.0\n".
               "(c) 2011 Carl Gorringe <car1\@gorringe.org>\n\n";

  if (scalar @ARGV != 1) {
    print STDERR "Usage:\n  $0 URL > output.html\n";
    print STDERR "Example:\n  $0 $url > top10.html\n";
    exit(1);
  }

  # get URL, and make sure it ends in a slash
  $url = $ARGV[0];
  if (substr($url, -1, 1) ne '/') { $url .= '/'; }

  # extract the name of the list
  my $listTitle = extractListTitle($url);

  print STDERR "Downloading & Parsing:\n" if ($debug_flag);
  print STDERR "  $url\n" if ($debug_flag);
  my ($urlList_ref, $monthList_ref) = parseIndexPage($url);

  ### TEST ###
  # foreach my $u (@$urlList_ref)   { print "$u\n"; }
  # foreach my $m (@$monthList_ref) { print "$m\n"; }
  ### TEST ###
  #my $url2 = $$urlList_ref[0];

  print htmlHeader($url, $listTitle);

  # get every author.html page
  for (my $i=0; $i < scalar @$urlList_ref; $i++) {
    my $url2 = $$urlList_ref[$i];

    print STDERR "  $url2\n" if ($debug_flag);
    my ($userNames_ref, $numPosts_ref) = parseMonthPage($url2);

    ### TEST ###
    #print "<h2>$$monthList_ref[$i]</h2>\n";
    #for (my $j=0; $j < scalar @$userNames_ref; $j++) {
    #  if ($j == 10) { last; }  # only print top 10
    #  print "$$numPosts_ref[$j] \t $$userNames_ref[$j] \n";
    #}

    # break tables into groups of 3 per row
    print '<div class="clear"></div>'."\n" if ($i % 3 == 0);

    # output month's top-10 table
    print htmlMonthTable($url2, $$monthList_ref[$i], $userNames_ref, $numPosts_ref);

    # if ($i == 5) { last; }  # only print 5   ## TEST ##
  }

  print htmlFooter();
  print STDERR "Done.\n" if ($debug_flag);
}

